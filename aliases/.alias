# Logins and Configs
alias czsh="$EDITOR ${HOME}/.zshrc"
alias szsh="source ${HOME}/.zshrc"
alias src="source ${HOME}/.zshrc"

alias cali="$EDITOR ${HOME}/.unix-configs/.alias"
alias sali="source ${HOME}/.unix-configs/.alias"

alias cozsh="$EDITOR ${HOME}/.oh-my-zsh"
alias sozsh="source ${HOME}/.oh-my-zsh"

alias ctmux="$EDITOR ${HOME}/.tmux.conf"
alias stmux="source ${HOME}/.tmux.conf"
alias ktmux="pkill -f tmux"


# @todo Package Manager Aliases
# @body Create and use distro-agnostic package management aliases so knowledge of the underlying package manager is not required for distro-specific package managers.
# Apt
alias updt="sudo apt update && sudo apt upgrade"
alias inst="sudo apt install --no-install-recommends"
alias uninst="sudo apt remove"
alias arem="sudo apt autoremove"
alias afix="sudo apt --fix-broken install"
alias aupdt="sudo apt list --upgradeable"
alias adep="sudo apt install -f --no-install-recommends"
alias alist="sudo apt list --installed"
alias aname="apt-cache pkgnames"
alias asear="apt-cache search"


# Dpkg
alias dinst="sudo dpkg -i"
alias duninst="sudo dpkg -r"
alias dpurg="sudo dpkg --purge"

dlist() {
    if [ "$1" != "" ]
    then
        echo Searching packages...
        dpkg -l | awk -v pkg_var="^"$1 '$2 ~ pkg_var {print $2}'
    else
        sudo dpkg -l
    fi
}

dpurglist() {
    if [ "$1" != "" ]
    then
        echo Purging packages...
        dpkg -l | awk -v pkg_var="^"$1 '$2 ~ pkg_var {print $2}' | xargs sudo dpkg --purge
    else
        No packages provided
    fi
}

# Pip
alias pip="pip3"
alias pinst="sudo -H pip3 install"
alias puninst="sudo -H pip3 uninstall"
alias pupdt="sudo -H pip3 freeze — local | grep -v ‘^\-e’ | cut -d = -f 1 | xargs -n1 sudo -H pip3 install -U"

# Gem
alias ginst="sudo gem install"



# General
alias e="exit"
alias cd..="cd .."
alias cd....="cd ../.."
alias cd/="cd /"

alias la="ls -lAohp --color=always"
alias lte="ls -lAohpt --color=always | awk 'NR != 1 && NR < 12'"

alias pa="ps -af"



# SSH
ssh_gen() {

    if [ -z ${2+x} ];
    then
        if [ -z ${1+x} ];
        then
            ssh-keygen
        else
            ssh-keygen -t ed25519 -N '' -f ${HOME}/.ssh/$1
        fi
    else
        echo ''
        echo '########################################'
        echo Creating ssh key $2
        echo '########################################'
        ssh-keygen -t ed25519 -N '' -f ${HOME}/.ssh/$2-$1

        ssh_copy $1 $2

        echo -e '=> Generate an SSH config? [Y/N] '
        read configConfirm
        configConfirm=$(echo $configConfirm | tr '[:lower:]' '[:upper:]')
        if [[ $configConfirm == 'YES' || $configConfirm == 'Y' ]]; then
            ssh_config $1 $2
        fi
    fi
}

ssh_copy() {
    if [ -z ${2+x} ];
    then
        ssh-copy-id
    else
        echo ''
        echo '########################################'
        echo Copying ssh key $1@$2
        echo '########################################'
        ssh-copy-id -f -i ${HOME}/.ssh/$2-$1 $1@$2
    fi
}

ssh_config() {
    if [ -z ${2+x} ];
    then
        echo 'Incorrect input parameters!'
    else
        echo -e '=> What is the alias you would like to configure? '
        read configAlias
        if [[ $configAlias ]]; then
            echo ''
            echo '########################################'
            echo Creating ssh config $1@$2
            echo '########################################'

            touch ${HOME}/.ssh/config
            echo '' >> ${HOME}/.ssh/config
            echo Host $configAlias >> ${HOME}/.ssh/config
            echo '    'HostName $2 >> ${HOME}/.ssh/config
            echo '    'User $1 >> ${HOME}/.ssh/config
            echo '    'IdentitiesOnly yes >> ${HOME}/.ssh/config
            echo '    'IdentityFile ${HOME}/.ssh/$2-$1 >> ${HOME}/.ssh/config
        fi
    fi
}

ssh_perm() {
    chmod 600 `find ${HOME}/.ssh -type f`
    chmod 700 ${HOME}/.ssh
    chmod 644 ${HOME}/.ssh/authorized_keys
    chmod 644 ${HOME}/.ssh/known_hosts
    chmod 644 ${HOME}/.ssh/config
    chmod 644 ${HOME}/.ssh/*.pub
}



# @todo Per-Application Aliases
# @body Potentially create per-application alias files to make them more modular.
# Applications
alias vim="nvim"
alias v="nvim"

alias vs="code"

alias bc="bcompare"

alias gc="google-chrome"
alias chrome="google-chrome"

alias pcat='pygmentize -f terminal256 -O style=native -g'

alias dl="http --download"

alias python="python3"

ctar() {
    tar -cvzf $1.tar.gz $1
}

alias untar="tar -xzf"

netscan() {
    echo Starting Nmap scan...
    sudo nmap -sn $1 | awk '!/Host is up|Starting Nmap|done/{gsub(/[()]/,""); if ($6 == "") {print $5} else {print $6 " " $5}}'
}

alias frefresh="sudo fc-cache -f -v"
